services:
  postgres:
    image: postgres:15
    container_name: iscan_postgres
    environment:
      POSTGRES_DB: iscan_db
      POSTGRES_USER: iscan_user
      POSTGRES_PASSWORD: iscan_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iscan_user -d iscan_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - iscan_network

  redis:
    image: redis:7-alpine
    container_name: iscan_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - iscan_network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: iscan_backend
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - iscan_network

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: iscan_celery
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - iscan_network
    command: ["sh", "-c", "python wait-for-db.py && python test_imports.py && celery -A app.celery_app worker --loglevel=info --concurrency=2"]

volumes:
  postgres_data:
  redis_data:

networks:
  iscan_network:
    driver: bridge
